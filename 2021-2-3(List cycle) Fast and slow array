Linked List Cycle(141)
List cycle: we use fast and slow points
example: S: 3,2,0,-4,2,0,-4(step 1)
         F: 3,0,2,-4(step 2)
         F==S cycle！
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if head==None or head.next==None:
            return False
        s=f=head
        while s is not None and f is not None and f.next is not None:
            s=s.next
            f=f.next.next
            if (f==s):
                return True
        return False 

Cycle of list (142)
//find the head of cycle

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return None
        s=f=head
        while f and f.next://important:f and f.next , not f.next and f
            s=s.next
            f=f.next.next
            if f==s:
                s=head
                while s!=f://(到head距离相等)
                    s=s.next
                    f=f.next
                else:
                    return s
                
        return None
