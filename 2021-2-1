Q1:Number of 1 Bits(191)

python  
class Solution(object):
    def hammingWeight(self, n):
        """
        :type n: int
        :rtype: int
        """
        trigger=0
        while n:
            n=n&(n-1)
            trigger+=1
        
        return trigger
// n&(n-1) to clear the last bit
&: 1 iff both bits are 1 otherwise is 0

Q2:counting bits(338)
//Given a non negative integer number num. 
For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.
First idea, transfer every numbers I into binary and caculate the bit 1s 
000
001
010
011              which gives a recursion num_bits(i)=num_bits(i & (i-1))+1
100
101
110

C++
class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> Bits(num+1);
            for (int i=1;i<=num;i++)
            {
                Bits[i]=Bits[i&(i-1)]+1;
                
            }
            return Bits;
        }   
        
    
};
python
class Solution(object):
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        results=[0]
        for i in range(1, num+1):
            results.append(results[i & (i-1)] + 1)
        return results
// python .append： Append values to the end of an array.
