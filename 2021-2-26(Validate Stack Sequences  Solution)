Validate Stack Sequences

Solution
idea:stack.pop and stack.append() as push
class Solution(object):
    def validateStackSequences(self, pushed, popped):
        """
        :type pushed: List[int]
        :type popped: List[int]
        :rtype: bool
        """
        if len(pushed)!=len(popped):
            return False
        
        stack=[]
        x=0
        for i in pushed:
            stack.append(i)
            while (stack and x<len(popped) and stack[-1]==popped[x] ):
                stack.pop()
                x+=1
                
        return x==len(pushed)
        
39. Combination Sum
:recursive

class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        def dfs(cur,path):
            if cur==0:
                return ans.append(path)
            for i in candidates:
                if cur<i:
                    break
                if path and i<path[-1]:
                    continue
                dfs(cur-i,path+[i])
            
        candidates.sort()
        
        ans=[]
        dfs(target,[])
        return ans
