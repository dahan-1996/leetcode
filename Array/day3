# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
The idea of solution is the following:

Calculate lengths of both lists and evaluate difference.
Make this number of steps for the longest list, pointer p1 and pointer p2 put to start of short list.
Move pointers p1 and p2 one by one until we have the same value: it will be either common element or it will be None element.
Suprasingly all this can be done in one loop: let us look at the line
currB = headA if currB is None else currB.next.
What we are doing here is when some list finishes we start to traverse another list. 

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        currA, currB = headA, headB
        
        while currA != currB:
            currB = headA if currB is None else currB.next
            currA = headB if currA is None else currA.next
            
        return currA
